{"version":3,"sources":["components/IsoMap/Cell.jsx","components/IsoMap/Row.jsx","components/IsoMap/Grid.jsx","components/IsoMap/IsoMap.jsx","components/BattleshipsUtils/BattleshipsUtils.jsx","components/GameFrame.jsx","components/App.jsx","index.js"],"names":["Cell","props","cellStyle","width","cellSize","height","noPerspective","transform","overflow","position","pointerEvents","className","getCellStyleClass","currentMap","rowIndex","colIndex","onClick","interactable","actionOnCell","setGameState","setCurrentMap","style","mapDataTranslate","cellValue","Row","rowData","map","cell","index","isInteractable","Grid","color","gridStyle","transformOrigin","border","length","backgroundImage","backgroundSize","row","isInnerRow","innerCols","IsoMap","startingMap","React","useState","w","h","handleActionOnCell","nonInteractable","shipsOnCols","shipsOnRows","mapValue","fontSize","fontWeight","isShip","src","split","alt","isWater","replace","code","isSingle","codeSplitted","isVertical","isHorizontal","updateShipsOnCols","col","amount","checkGame","numRows","numCols","result","i","ships","water","j","parseInt","c","r","arround","checkShips","newMap","setBoatCell","setNewCell","oldMap","thisRow","thisCell","getBoatCellHorizontal","left","right","getBoatCellVertical","up","down","isNaN","isNumber","GameFrame","colData","sureCells","boatsData","times","boats","x","k","str","repeat","push","Battleships","hints","gameDone","setGameDone","boat","state","notifyGameDone","App","activeSections","setActiveSections","paragraphMapper","text","parse","Math","random","Content","section","p","hasOwnProperty","game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c86f2c3d.chunk.js","sourcesContent":["import React from \"react\";\nfunction Cell(props){\n  let cellStyle = {\n    width: props.cellSize + \"px\",\n    height: props.cellSize + \"px\",\n  }\n  let noPerspective= {\n      transform: \"rotate3d(0,  0, 1, -45deg) rotate3d(0,  1, 0, -55deg) translate(0px, -\" + props.cellSize * 4/3  +\"px) \",\n      width: props.cellSize * 3 + \"px\",\n      height: props.cellSize * 3 + \"px\",\n      overflow: \"visible\",\n      position: \"absolute\",\n      pointerEvents: \"none\"\n  }\n\n  function handleClick(){\n    props.actionOnCell(props.currentMap, props.rowIndex, props.colIndex, props.setGameState, props.setCurrentMap);\n  }\n\n\n  return(\n    <div className={'cell ' + props.getCellStyleClass(props.currentMap, props.rowIndex, props.colIndex)} onClick={props.interactable ? handleClick: null} style={cellStyle}>\n      <div className=\"cellContent\" style={noPerspective}>\n        {props.mapDataTranslate(props.cellValue)}\n      </div>\n    </div>\n  );\n}\n\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"./Cell\";\n\nfunction Row(props) {\n\n  function cellMapper(cell, index) {\n\n    return ( < Cell key = {\n        \"cell\" + props.rowIndex + \"\" + index\n      }\n      rowIndex = {\n        props.rowIndex\n      }\n      colIndex = {\n        index\n      }\n\n      cellSize = {\n        props.cellSize\n      }\n      cellValue = {\n        props.rowData[index]\n      }\n      actionOnCell = {\n        props.actionOnCell\n      }\n      interactable = {\n        props.isInteractable(props.currentMap[props.rowIndex][index])\n      }\n      mapDataTranslate = {\n        props.mapDataTranslate\n      }\n      currentMap={\n        props.currentMap\n      }\n\n      setGameState={\n        props.setGameState\n      }\n\n      setCurrentMap={\n        props.setCurrentMap\n      }\n\n      getCellStyleClass={\n        props.getCellStyleClass\n      }\n\n      />);\n    }\n\n\n    return ( < div className = \"row\" > {\n        props.rowData.map(cellMapper)\n      } <\n      /div>);\n    }\n\n    export default Row;\n","import React from \"react\";\nimport Row from \"./Row\"\n\nfunction Grid(props) {\n  let cellSize = props.cellSize;\n  let color = \"rgba(0,0,0,0.2)\"\n  let gridStyle = {\n    transformOrigin: \"center\",\n    transform: \"rotate3d(1, 0, 0, 55deg) rotate3d(0, 0, 1, 45deg)\",\n    border: \"3px solid\",\n    width: (cellSize * (props.currentMap[0].length - 1)) + \"px\",\n    height: (cellSize * (props.currentMap.length - 1)) + \"px\",\n    backgroundImage: \"linear-gradient(\" + color + \" 2px, transparent 1px), linear-gradient(90deg,\" + color + \" 2px, transparent 1px)\",\n    backgroundSize: cellSize + \"px \" + cellSize + \"px\"\n  }\n\n  function rowMapper(row, index) {\n    return ( < Row rowData = {\n        row\n      }\n      key = {\n        \"row\" + index\n      }\n      rowIndex = {\n        index\n      }\n\n      cellSize = {\n        props.cellSize\n      }\n      actionOnCell = {\n        props.actionOnCell\n      }\n      isInnerRow={\n        index < props.currentMap.length - 1\n      }\n      innerCols={\n        props.currentMap[0].length - 1\n      }\n\n      mapDataTranslate={\n        props.mapDataTranslate\n      }\n\n      currentMap={\n        props.currentMap\n      }\n\n      setGameState={\n        props.setGameState\n      }\n\n      setCurrentMap={\n        props.setCurrentMap\n      }\n      getCellStyleClass={\n        props.getCellStyleClass\n      }\n\n      isInteractable={\n        props.isInteractable\n      }\n\n      />);\n    }\n    //props.isInteractable(\"R\")\n    return ( <\n      div className = \"grid\"\n      style = {\n        gridStyle\n      } >\n      {\n        props.currentMap.map(rowMapper)\n      } <\n      /div>\n    );\n  }\n\n  export default Grid;\n","import React from \"react\";\nimport Grid from \"./Grid\";\nimport \"./isoMap.css\"\n\n\nfunction IsoMap(props) {\n  const startingMap = props.startingMap\n  const [currentMap, setCurrentMap] = React.useState(startingMap);\n\n\n  return ( <\n    div className = \"wrapper\" >\n    <\n    Grid w = {\n      props.w\n    }\n    h = {\n      props.h\n    }\n\n    cellSize={\n      props.cellSize\n    }\n    currentMap = {\n      currentMap\n    }\n    actionOnCell = {\n      props.handleActionOnCell\n    }\n    mapDataTranslate={\n      props.mapDataTranslate\n    }\n    nonInteractable={\n      props.nonInteractable\n    }\n\n    setGameState={\n      props.setGameState\n    }\n\n    setCurrentMap={\n      setCurrentMap\n    }\n    getCellStyleClass={\n      props.getCellStyleClass\n    }\n\n    isInteractable={\n      props.isInteractable\n    }\n\n    /> < /\n    div >\n  )\n\n\n}\n\nexport default IsoMap;\n","import React from \"react\";\nlet shipsOnCols = []\nlet shipsOnRows = []\n\n\nfunction mapDataTranslate(mapValue, currentMap) {\n  let cellStyle = {\n    fontSize: \"40px\",\n    fontWeight: \"bold\",\n    color: \"grey\"\n  }\n  if (isShip(mapValue)) {\n    let type = mapValue.split(\" \")[0];\n    let src = \"imgs/ships/\" + type + \".gif\";\n    return ( < img src = {\n        src\n      }\n\n      alt={mapValue + \" image\"}/>);\n    }\n    else if (isWater(mapValue)) {\n      cellStyle[\"color\"] = \"white\"\n      return ( < div style = {\n          cellStyle\n        } > {\n          \"~\"\n        } < /div>);\n      }\n      else if (mapValue === \".\") {\n        cellStyle[\"color\"] = \"grey\"\n      } else {\n        cellStyle[\"color\"] = \"#000\"\n        return ( < div style = {\n            cellStyle\n          } > {\n            mapValue.replace(\" F\", \"\")\n          } < /div>);\n        }\n      }\n\n      function isShip(code) {\n        let codeSplitted = code.split(\" \");\n        return (codeSplitted[0][0] === \"B\");\n      }\n\n      function isWater(code) {\n        let codeSplitted = code.split(\" \");\n        return (codeSplitted[0] === \"W\")\n      }\n\n      function isNumber(code) {\n        let codeSplitted = code.split(\" \");\n        return (!isNaN(codeSplitted[0]))\n      }\n\n      function isSingle(code) {\n        code = code.split(\" \")[0];\n        if (isShip(code)) {\n          return (code[1] === \"0\")\n        } else {\n          return false;\n        }\n      }\n\n      function isInteractable(code) {\n        let codeSplitted = code.split(\" \");\n        return (codeSplitted[codeSplitted.length - 1] !== \"F\")\n      }\n\n      function isVertical(code) {\n        code = code.split(\" \")[0];\n        if (isShip(code)) {\n          return (code[1] === \"0\" || code[2] === \"C\")\n        } else {\n          return false;\n        }\n      }\n\n      function isHorizontal(code) {\n        ;\n        code = code.split(\" \")[0];\n        if (isShip(code)) {\n          return (code[1] === \"0\" || code[2] === \"R\")\n\n        } else {\n          return false;\n        }\n      }\n\n      function updateShipsOnCols(col, amount) {\n        shipsOnCols[col] = amount;\n        return (shipsOnCols);\n      }\n\n      function updateShipsOnRows(row, amount) {\n        shipsOnRows[row] = amount;\n        return (shipsOnRows);\n      }\n\n      function checkShips(currentMap) {\n        let numRows = currentMap.length - 1;\n        let numCols = currentMap[0].length;\n\n        let result = true;\n        for (var i = 0; i < numRows; i++) {\n          for (var j = 0; j < numCols; j++) {\n            let arround = false;\n            if (isShip(currentMap[i][j])) {\n              if (0 < i - 1 && 0 < j - 1) {\n                arround = arround || isShip(currentMap[i - 1][j - 1])\n              }\n              if (0 < i - 1 && j + 1 < numCols) {\n                arround = arround || isShip(currentMap[i - 1][j + 1])\n              }\n              if (i + 1 < numRows && 0 < j - 1) {\n                arround = arround || isShip(currentMap[i + 1][j - 1])\n              }\n              if (i + 1 < numRows && j + 1 < numCols) {\n                arround = arround || isShip(currentMap[i + 1][j + 1])\n              }\n              result &= !arround\n\n            }\n\n          }\n        }\n        return (result)\n      }\n\n      function checkGame(currentMap) {\n        let numRows = currentMap.length - 1;\n        let numCols = currentMap[0].length - 1;\n\n        let result = true;\n        for (var i = 0; i < numRows; i++) {\n          let ships = 0\n          let water = 0\n          for (var j = 0; j < numCols; j++) {\n            if (isShip(currentMap[i][j])) {\n              ships += 1;\n            } else if (isWater(currentMap[i][j])) {\n              water += 1;\n            }\n          }\n          updateShipsOnRows(i, ships);\n          result &= parseInt(currentMap[i][numCols]) === ships && (ships + water === numRows)\n        }\n\n        for (var c = 0; c < numCols; c++) {\n          let ships = 0\n          let water = 0\n          for (var r = 0; r < numRows; r++) {\n            if (isShip(currentMap[r][c])) {\n              ships += 1;\n            } else if (isWater(currentMap[r][c])) {\n              water += 1;\n            }\n          }\n          updateShipsOnCols(c, ships);\n          result &= parseInt(currentMap[numRows][c]) === ships && (ships + water === numCols)\n        }\n        result &= checkShips(currentMap)\n        return (result);\n      }\n\n      function handleActionOnCell(currentMap, row, col, setGameState, setCurrentMap) {\n        let newMap = setNewCell(currentMap, row, col);\n\n        setGameState(checkGame(currentMap));\n\n        setCurrentMap((oldMap) => {\n          return (oldMap.map((thisRow, rowIndex) => {\n            return (thisRow.map((thisCell, colIndex) => {\n              if (thisCell !== newMap[rowIndex][colIndex]) {\n                return (newMap[row][col])\n              } else {\n                return (thisCell)\n              }\n\n            }));\n          }));\n        })\n\n      }\n\n      function getBoatCellHorizontal(map, row, col) {\n        if (isInteractable(map[row][col]) && isHorizontal(map[row][col])) {\n          let left, right = false;\n          left = col > 0 && isShip(map[row][col - 1]);\n          right = col + 1 < map[0].length && isShip(map[row][col + 1]);\n          if (left && right) {\n            return (\"B2R\");\n          } else if (left && !right) {\n            return (\"B1R\");\n          } else if (!left && right) {\n            return (\"B3R\");\n          } else {\n            return (\"B0\");\n          }\n        } else {\n          return (map[row][col])\n        }\n      }\n\n      function getBoatCellVertical(map, row, col) {\n        if (isInteractable(map[row][col]) && isVertical(map[row][col])) {\n          let up, down = false;\n          up = row > 0 && isShip(map[row - 1][col]);\n          down = row + 1 < map.length && isShip(map[row + 1][col]);\n          if (up && down) {\n            return (\"B2C\");\n          } else if (up && !down) {\n            return (\"B1C\");\n          } else if (!up && down) {\n            return (\"B3C\");\n          } else {\n            return (\"B0\");\n          }\n        } else {\n          return (map[row][col])\n        }\n      }\n\n      function setBoatCell(newMap, row, col) {\n        let left, right, up, down = false;\n\n\n\n        left = col > 0 && (isHorizontal(newMap[row][col - 1]));\n        right = col + 1 < newMap[0].length && (isHorizontal(newMap[row][col + 1]));\n        up = row > 0 && (isVertical(newMap[row - 1][col]));\n        down = row + 1 < newMap.length && (isVertical(newMap[row + 1][col]));\n\n        if (isVertical(newMap[row][col])) {\n          left = false;\n          right = false;\n        } else if (isHorizontal(newMap[row][col])) {\n          up = false;\n          down = false;\n        }\n\n\n        if (left && right) {\n          newMap[row][col] = \"B2R\";\n          newMap[row][col - 1] = getBoatCellHorizontal(newMap, row, col - 1);\n          newMap[row][col + 1] = getBoatCellHorizontal(newMap, row, col + 1);\n        } else if (left && !right) {\n          newMap[row][col] = \"B1R\";\n          newMap[row][col - 1] = getBoatCellHorizontal(newMap, row, col - 1);\n        } else if (!left && right) {\n          newMap[row][col] = \"B3R\";\n          newMap[row][col + 1] = getBoatCellHorizontal(newMap, row, col + 1);\n        } else {\n\n          if (up && down) {\n            newMap[row][col] = \"B2C\";\n            newMap[row - 1][col] = getBoatCellVertical(newMap, row - 1, col);\n            newMap[row + 1][col] = getBoatCellVertical(newMap, row + 1, col);\n          } else if (up && !down) {\n            newMap[row][col] = \"B1C\";\n            newMap[row - 1][col] = getBoatCellVertical(newMap, row - 1, col);\n          } else if (!up && down) {\n            newMap[row][col] = \"B3C\";\n            newMap[row + 1][col] = getBoatCellVertical(newMap, row + 1, col);\n          } else {\n            newMap[row][col] = \"B0\";\n          }\n        }\n\n        return newMap\n      }\n\n      function setNewCell(newMap, row, col) {\n        if (newMap[row][col] === \".\") {\n          newMap[row][col] = \"W\";\n\n        } else if (isWater(newMap[row][col])) {\n          newMap = setBoatCell(newMap, row, col);\n        } else {\n          newMap[row][col] = \".\";\n          if (col > 0 && isShip(newMap[row][col - 1])) {\n\n            setBoatCell(newMap, row, col - 1)\n            if (isSingle(newMap[row][col - 1])) {\n            setBoatCell(newMap, row, col - 1)\n          }\n        }\n        if (col + 1 < newMap[0].length && isShip(newMap[row][col + 1])) {\n\n          setBoatCell(newMap, row, col + 1)\n          if (isSingle(newMap[row][col + 1])) {\n          setBoatCell(newMap, row, col + 1)\n        }\n      }\n      if (row > 0 && isShip(newMap[row - 1][col])) {\n\n        setBoatCell(newMap, row - 1, col)\n        if (isSingle(newMap[row - 1][col])) {\n        setBoatCell(newMap, row - 1, col)\n      }\n    }\n    if (row + 1 < newMap.length && isShip(newMap[row + 1][col])) {\n\n      setBoatCell(newMap, row + 1, col)\n      if (isSingle(newMap[row + 1][col])) {\n      setBoatCell(newMap, row + 1, col)\n    }\n\n  }\n\n}\nreturn (newMap)\n}\n\n\nfunction getCellStyleClass(currentMap, row, col) {\n\n  let className = isInteractable(currentMap[row][col]) ? 'interactable' : '';\n  className += isShip(currentMap[row][col]) ? ' ship ' : ''\n  className += isWater(currentMap[row][col]) ? ' sea ' : ''\n  className += isNumber(currentMap[row][col]) ? ' number ' : ''\n  className += row === currentMap.length - 1 ? 'left' : ''\n  className += col === currentMap[0].length - 1 ? 'right' : ''\n  return (className)\n}\n\nfunction repeatStringNumTimes(string, times) {\n  if (times > 0)\n    return string.repeat(times);\n  else\n    return \"\";\n}\n\nfunction generateMap(rowData, colData, sureCells, boatsData) {\n  let map = []\n  let boats = []\n  for (var r = 0; r < rowData.length; r++) {\n    let row = []\n    for (var c = 0; c < colData.length; c++) {\n      row[c] = \".\"\n    }\n    row[colData.length] = rowData[r] + \" F\"\n    map[r] = row\n  }\n  map[rowData.length] = colData.map((x) => (x + \" F\"))\n\n  for (var k = 0; k < sureCells.length; k++) {\n\n    map[sureCells[k][0]][sureCells[k][1]] = sureCells[k][2] + \" F\"\n  }\n\n  for (var i = 0; i < boatsData.length; i++) {\n    for (var j = 0; j < boatsData[i]; j++) {\n      let str = \"· \";\n      str = repeatStringNumTimes(str, i)\n      boats.push(str + \"·\")\n    }\n  }\n  return [map, boats];\n}\n\nexport {\n  mapDataTranslate,\n  checkGame,\n  setNewCell,\n  shipsOnCols,\n  shipsOnRows,\n  handleActionOnCell,\n  getCellStyleClass,\n  isInteractable,\n  generateMap\n};\n","import React from \"react\";\nimport IsoMap from \"./IsoMap/IsoMap\";\nimport * as Battleships from \"./BattleshipsUtils/BattleshipsUtils.jsx\";\nimport \"./BattleshipsUtils/battleships.css\"\n\nfunction GameFrame(props){\n\n  const [startingMap, boats]=Battleships.generateMap(props.rowData, props.colData, props.hints, props.ships);\n\n  let [gameDone, setGameDone] = React.useState(false);\n\n  function setGameState(state){\n    if(state){\n      props.notifyGameDone()\n    }\n    setGameDone(state);\n  }\n\n    return (\n      <div className=\"game\">\n\n      <div>{boats.map((boat, index) => {\n        return(\n          <div key={\"boat\"+index}className=\"boat\">\n            {boat}\n          </div>\n        )\n      })}</div>\n\n      <\n      IsoMap w = {\n        startingMap[0].length\n      }\n      h = {\n        startingMap.length\n      }\n      cellSize={\n        props.cellSize\n      }\n\n      startingMap = {\n        startingMap\n      }\n\n      mapDataTranslate = {\n        Battleships.mapDataTranslate\n      }\n\n\n      handleActionOnCell={\n        Battleships.handleActionOnCell\n      }\n\n      setGameState={\n        setGameState\n      }\n      getCellStyleClass={\n        Battleships.getCellStyleClass\n      }\n\n      isInteractable={\n        Battleships.isInteractable\n      }\n      />\n\n\n      <div className=\"gameDone\">{gameDone? <p>Done</p> : null}</div>\n      < /div >\n    );\n}\n\nexport default GameFrame\n","import React from \"react\";\nimport GameFrame from \"./GameFrame\";\nimport parse from \"html-react-parser\";\nimport \"./app.css\"\nimport Content from \"../content.json\";\n\n\n\nfunction App() {\n\n  let [activeSections, setActiveSections] = React.useState(0);\n\n  function getSectionClass(i){\n    if (i === activeSections){\n      return (\"section show\");\n    }else if(i < activeSections){\n      return (\"section\");\n    }else{\n      return (\"section hide\");\n    }\n  }\n\n  function paragraphMapper(text, index){\n    return (<p key={\"p\" + index + \"-\" + parseInt(Math.random() * 10)}> {parse(text)} </p>);\n  }\n\n  function sectionMapper(section, index){\n    return(\n    <div className={getSectionClass(index)} key={\"section\" + index}>\n      {section.p.map(paragraphMapper)}\n      {section.hasOwnProperty(\"game\")?\n      <GameFrame key={\"game\" + index}\n            rowData={section.game.rowData}\n            colData={section.game.colData}\n            hints={section.game.hints}\n            ships={section.game.ships}\n            cellSize={section.game.cellSize}\n            notifyGameDone={\n              () => {\n                setActiveSections(index + 1);\n              }\n            }\n      /> :null}\n      </div>\n);\n  }\n\n\n\nreturn(\n  <div className=\"content\">\n  {Content.map(sectionMapper)}\n      </div>\n);\n\n  }\n\n  export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}